package com.eventdata.service;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.eventdata.model.EventData;
import com.eventdata.repo.EventRepository;
import com.eventdata.scraper.TechMeme;
import com.eventdata.scraper.ComputerWorld;

@Service
public class EventService {
	@Autowired
	EventRepository repo;
	private static final Logger LOGGER = LoggerFactory.getLogger(EventService.class);
	
    @Async
    public CompletableFuture<List<EventData>> saveEvents1() throws IOException
    {
    	final ComputerWorld s=new ComputerWorld();
    	List<EventData> events=null;
		events=s.extractEvents();
		repo.saveAll(events);
    	return CompletableFuture.completedFuture(events);
    }
    @Async
    public CompletableFuture<List<EventData>> saveEvents()
    {
		final TechMeme scraper=new TechMeme();
		List<EventData> events=null;
		final long start = System.currentTimeMillis();
		LOGGER.info("Start time: {}",  start);
		try {
			events=scraper.extractEvents();
		} catch (IOException e) {
			e.printStackTrace();
		}
		repo.saveAll(events);
		LOGGER.info("Elapsed time: {}", (System.currentTimeMillis() - start));
    	return CompletableFuture.completedFuture(events);
    }

    public List <EventData> getAll() throws IOException
    {
    	saveEvents1();
    	saveEvents();
    	return repo.findAll();
    }
    @Async
    public CompletableFuture<List<EventData>> getEvents() throws IOException
    {
    	saveEvents1();
    	saveEvents();
    	List<EventData> events=repo.findAll();
    	return CompletableFuture.completedFuture(events);
    }
    	
}

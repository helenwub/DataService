package com.eventdata.service;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;
import java.util.concurrent.CompletableFuture;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.eventdata.model.EventData;
import com.eventdata.repo.EventRepository;
import com.eventdata.scraper.Scraper;
import com.eventdata.scraper.Scraper2;
@Service
public class EventService {
	@Autowired
	EventRepository repo;
	private static final Logger LOGGER = LoggerFactory.getLogger(EventService.class);

	
	
	
	@Async
    public List <EventData> getAll()
    {
    	saveEvents1();
    	saveEvents();
    	return repo.findAll();
    }
    @Async
    public CompletableFuture<List<EventData>> saveEvents1()
    {
    	final Scraper2 s=new Scraper2();
    	List<EventData> events=null;

		try {
			events=s.extractEvents();
		} catch (IOException e) {
			e.printStackTrace();
		}
		repo.saveAll(events);
		//LOGGER.info("Elapsed time: {}", (System.currentTimeMillis() - start));
    	return CompletableFuture.completedFuture(events);
    }
    
    
    @Async
    public CompletableFuture<List<EventData>> saveEvents()
    {
		final Scraper scraper=new Scraper();
		List<EventData> events=null;
		final long start = System.currentTimeMillis();
		LOGGER.info("Start time: {}",  start);
//		String exeString="java -jar "+webName;
		// Run a java app in a separate system process
//		Process proc = null;
//		try {
//			proc = Runtime.getRuntime().exec(exeString);
//			// Then retreive the process output
//			InputStream in = proc.getInputStream();
//			InputStream err = proc.getErrorStream();
//			final BufferedReader br = new BufferedReader(new InputStreamReader(in));
//			final BufferedReader berr = new BufferedReader(new InputStreamReader(err));
//			LOGGER.info("IN is:"+br.readLine());
//			LOGGER.info("ERR is:"+berr.readLine());
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}

		try {
			events=scraper.extractEvents();
		} catch (IOException e) {
			e.printStackTrace();
		}
		repo.saveAll(events);
    	return CompletableFuture.completedFuture(events);
    }
    @Async
    public CompletableFuture<List<EventData>> getEvents()
    {
    	List<EventData> events=repo.findAll();
    	return CompletableFuture.completedFuture(events);
    }
    
	public EventData save(EventData e) {
		// TODO Auto-generated method stub
		return repo.save(e);
	}
}
